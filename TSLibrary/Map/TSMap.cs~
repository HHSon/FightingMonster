using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Microsoft.Xna.Framework;
using Microsoft.Xna.Framework.Graphics;
using Microsoft.Xna.Framework.Content;
using System.Diagnostics;

namespace TSLibrary.Map
{
    /// <summary>
    /// Lớp bản đồ được sử dụng để tạo bản đồ cho các màn chơi. Bản đồ
    /// được tạo thành từ một mảng hai chiều các ô nhỏ.
    /// </summary>
    public class TSMap : TSVisibleGameEntity
    {
        protected Vector2 _P0;
        protected int _numRows;
        protected int _numColumns;

        protected TSTile[,] _tiles;
        protected int _tileWidth;
        protected int _tileHeight;


        #region Property Region

        /// <summary>
        /// Mảng 2 chiều các ô tạo thành bản đồ
        /// </summary>
        public TSTile[,] Tiles
        {
            get { return _tiles; }
            protected set { _tiles = value; }
        }

        public Vector2 P0
        {
            get { return _P0; }
            protected set { _P0 = value; }
        }

        /// <summary>
        /// Số ô theo chiều dọc
        /// </summary>
        public int NumRows
        {
            get { return _numRows; }
            protected set { _numRows = value;}
        }

        /// <summary>
        /// Số ô theo chiều ngang
        /// </summary>
        public int NumColumns
        {
            get { return _numColumns; }
            protected set { _numColumns = value; }
        }


        /// <summary>
        /// Chiều rộng của các ô (tile)
        /// </summary>
        public int TileWidth
        {
            get { return _tileWidth; }
            protected set { _tileWidth = value; }
        }

        /// <summary>
        /// Chiều cao của các ô (tile)
        /// </summary>
        public int TileHeight
        {
            get { return _tileHeight; }
            protected set { _tileHeight = value; }
        }

        #endregion

        protected int nColToDraw;
        protected int nRowToDraw;
        protected Vector2 maxP0;




        /// <summary>
        /// Khởi tạo bản đồ
        /// </summary>
        /// <param name="numRows">Số dòng của bản đồ</param>
        /// <param name="numColumns">Số cột của bản đồ</param>
        /// <param name="tileWidth">Chiều rộng của 1 ô</param>
        /// <param name="tileHeight">Chiều cao của 1 ô</param>
        /// <param name="screenWidth">Chiều rộng của màn hình</param>
        /// <param name="screenHeight">Chiều cao của màn hình</param>
        public TSMap(int numRows, int numColumns, int tileWidth, int tileHeight,
                          int screenWidth, int screenHeight)
        {
            if ((numRows < 0) || (numColumns < 0) || 
                    (tileWidth < 0) || (tileHeight < 0) ||
                    (screenWidth < 0) || (screenHeight < 0))
                throw new ArgumentException("Tất cả các biến phải lớn hơn hoặc bằng 0");

            _numRows = numRows;
            _numColumns = numColumns;
            _tileWidth = tileWidth;
            _tileHeight = tileHeight;
            _width = screenWidth;
            _height = screenHeight;

            nRowToDraw = (_height / _tileHeight) + 3;   // số dòng vẽ trên màn hình
            nColToDraw = (_width / _tileWidth) + 3;     // số cột vẽ trên man hình

            maxP0.X = (_numColumns * _tileWidth) - screenWidth;
            maxP0.Y = (_numRows * _tileHeight) - screenHeight;

            if (maxP0.X < 0)
                maxP0.X = 0;

            if (maxP0.Y < 0)
                maxP0.Y = 0;

            InitTiles();
        }

        protected void InitTiles()
        {
            _tiles = new TSTile[_numRows, _numColumns];

            for (int row = 0; row < _numRows; row++)
                for (int col = 0; col < _numColumns; col++)
                    Tiles[row, col] = new TSTile();
        }

        public void LoadContent(ContentManager content)
        {
            if (content != null)
            {
                for (int row = 0; row < NumRows; row++)
                    for (int col = 0; col < NumColumns; col++)
                        _tiles[row, col].Background = content.Load<Texture2D>(@"Image/Map/blueimage");
            }
        }

        public override void Update(GameTime gameTime)
        {
            base.Update(gameTime);
        }

        public override void Draw(GameTime gameTime, SpriteBatch spriteBatch)
        {
            int startRow = (int)P0.Y / TileHeight;
            int startCol = (int)P0.X / TileWidth;

            if ((startRow < 0) || (startCol < 0))
                return;

            int dx = (int)P0.X % TileWidth;
            int dy = (int)P0.Y % TileHeight;

            int maxRoxIdx = ((startRow + nRowToDraw) < NumRows) ?
                                 (startRow + nRowToDraw) :
                                 NumRows;

            int maxColIdx = ((startCol + nColToDraw) < NumColumns) ?
                                (startCol + nColToDraw) :
                                NumColumns;

            for (int row = startRow; row < maxRoxIdx; row++)
                for (int col = startCol; col < maxColIdx; col++)
                    spriteBatch.Draw(
                        Tiles[row, col].Background,
                        new Rectangle(col * TileHeight - dx - (int)P0.X, row * TileWidth - dy - (int)P0.Y, TileWidth, TileHeight),
                        Color.White);
        }

        public bool ScrollTo(int positionX, int positionY)
        {
            Debug.WriteLine("Position = " + positionX + ", " + positionY);
            Debug.WriteLine("MaxP0 = " + maxP0.X + ", " + maxP0.Y);
            Debug.WriteLine("P0 = " + P0.X + ", " + P0.Y);

            if (positionX < 0)
                _P0.X = 0;
            else if (positionX > maxP0.X)
                _P0.X = maxP0.X;
            else
                _P0.X = positionX;


            if (positionY < 0)
                _P0.Y = 0;
            else if (positionY > maxP0.Y)
                _P0.Y = maxP0.Y;
            else
                _P0.Y = positionY;


            return true;
        }

        public bool ScrollTo(Vector2 point)
        {
            return ScrollTo((int)point.X, (int)point.Y);
        }

        public bool Move(int dx, int dy)
        {
            return ScrollTo((int)P0.X + dx, (int)P0.Y + dy);
        }

        public Vector2 GetPositionOnScreen(Vector2 positionOnMap)
        {
            return (positionOnMap - P0);
        }

        public bool IsInScreenArea(Vector2 positionOnMap)
        {
            if ((positionOnMap.X - P0.X < 0) ||
					(positionOnMap.X - P0.X > _width))
                return false;

            if ((positionOnMap.Y - P0.Y < 0) ||
                    (positionOnMap.Y - P0.Y > _height))
                return false;

            return true;
        }
    }
}

